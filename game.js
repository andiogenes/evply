// Generated by Haxe 3.4.7
(function ($hx_exports, $global) { "use strict";
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,push: function(item) {
		var x = new _$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	,first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h.item;
		}
	}
	,last: function() {
		if(this.q == null) {
			return null;
		} else {
			return this.q.item;
		}
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,remove: function(v) {
		var prev = null;
		var l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var PointerBehaviourType = { __ename__ : true, __constructs__ : ["Select","Zoom","Move"] };
PointerBehaviourType.Select = ["Select",0];
PointerBehaviourType.Select.__enum__ = PointerBehaviourType;
PointerBehaviourType.Zoom = ["Zoom",1];
PointerBehaviourType.Zoom.__enum__ = PointerBehaviourType;
PointerBehaviourType.Move = ["Move",2];
PointerBehaviourType.Move.__enum__ = PointerBehaviourType;
var InputType = { __ename__ : true, __constructs__ : ["Text","Symbol","Number"] };
InputType.Text = ["Text",0];
InputType.Text.__enum__ = InputType;
InputType.Symbol = ["Symbol",1];
InputType.Symbol.__enum__ = InputType;
InputType.Number = ["Number",2];
InputType.Number.__enum__ = InputType;
var pixi_plugins_app_Application = function() {
	this._animationFrameId = null;
	this.pixelRatio = 1;
	this.autoResize = true;
	this.transparent = false;
	this.antialias = false;
	this.forceFXAA = false;
	this.roundPixels = false;
	this.legacy = false;
	this.clearBeforeRender = true;
	this.preserveDrawingBuffer = false;
	this.backgroundColor = 16777215;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "static";
};
pixi_plugins_app_Application.__name__ = true;
pixi_plugins_app_Application.prototype = {
	_setDefaultValues: function() {
		this._animationFrameId = null;
		this.pixelRatio = 1;
		this.autoResize = true;
		this.transparent = false;
		this.antialias = false;
		this.forceFXAA = false;
		this.roundPixels = false;
		this.legacy = false;
		this.clearBeforeRender = true;
		this.preserveDrawingBuffer = false;
		this.backgroundColor = 16777215;
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.position = "static";
	}
	,start: function(rendererType,parentDom,canvasElement) {
		if(rendererType == null) {
			rendererType = "auto";
		}
		if(canvasElement == null) {
			this.canvas = window.document.createElement("canvas");
			this.canvas.style.width = this.width + "px";
			this.canvas.style.height = this.height + "px";
			this.canvas.style.position = this.position;
		} else {
			this.canvas = canvasElement;
		}
		if(this.autoResize) {
			window.onresize = $bind(this,this._onWindowResize);
		}
		var renderingOptions = { };
		renderingOptions.width = this.width | 0;
		renderingOptions.height = this.height | 0;
		renderingOptions.view = this.canvas;
		renderingOptions.backgroundColor = this.backgroundColor;
		renderingOptions.resolution = this.pixelRatio;
		renderingOptions.antialias = this.antialias;
		renderingOptions.forceFXAA = this.forceFXAA;
		renderingOptions.autoResize = this.autoResize;
		renderingOptions.transparent = this.transparent;
		renderingOptions.clearBeforeRender = this.clearBeforeRender;
		renderingOptions.preserveDrawingBuffer = this.preserveDrawingBuffer;
		renderingOptions.roundPixels = this.roundPixels;
		renderingOptions.legacy = this.legacy;
		if(rendererType == null) {
			this.app = new PIXI.Application(renderingOptions);
		} else if(rendererType == "canvas") {
			renderingOptions.forceCanvas = true;
			this.app = new PIXI.Application(renderingOptions);
		} else {
			this.app = new PIXI.Application(renderingOptions);
		}
		this.stage = this.app.stage;
		this.renderer = this.app.renderer;
		if(parentDom == null) {
			window.document.body.appendChild(this.app.view);
		} else {
			parentDom.appendChild(this.app.view);
		}
		this.app.ticker.add($bind(this,this._onRequestAnimationFrame));
	}
	,pauseRendering: function() {
		this.app.stop();
	}
	,resumeRendering: function() {
		this.app.start();
	}
	,_onWindowResize: function(event) {
		this.width = window.innerWidth;
		this.height = window.innerHeight;
		this.app.renderer.resize(this.width,this.height);
		this.canvas.style.width = this.width + "px";
		this.canvas.style.height = this.height + "px";
		if(this.onResize != null) {
			this.onResize();
		}
	}
	,_onRequestAnimationFrame: function() {
		if(this.onUpdate != null) {
			this.onUpdate(this.app.ticker.deltaTime);
		}
	}
	,addStats: function() {
		if(window.Perf != null) {
			var rendererType = this.app.renderer.type;
			var renderer;
			switch(rendererType) {
			case 1:
				renderer = "WEBGL";
				break;
			case 2:
				renderer = "CANVAS";
				break;
			default:
				renderer = "UNKNOWN";
			}
			new Perf().addInfo(renderer + " - " + this.pixelRatio);
		}
	}
	,__class__: pixi_plugins_app_Application
};
var Main = function() {
	this.inputType = InputType.Text;
	var _gthis = this;
	pixi_plugins_app_Application.call(this);
	this.evaluator = new interpreter_Evaluator();
	window.document.body.addEventListener("contextmenu",function(e) {
		if(e.button == 2) {
			e.preventDefault();
		}
	});
	window.document.body.addEventListener("keydown",function(e1) {
		if(e1.shiftKey == true && _gthis.workspace != null) {
			_gthis.workspace.shiftPressed = true;
		}
		if(e1.keyCode == 46) {
			_gthis.workspace.deleteSelected();
		}
	});
	window.document.body.addEventListener("keyup",function(e2) {
		if(_gthis.workspace != null) {
			_gthis.workspace.shiftPressed = false;
		}
	});
	window.document.querySelector("#string_btn").addEventListener("click",function() {
		_gthis.inputType = InputType.Text;
	});
	window.document.querySelector("#symbol_btn").addEventListener("click",function() {
		_gthis.inputType = InputType.Symbol;
	});
	window.document.querySelector("#number_btn").addEventListener("click",function() {
		_gthis.inputType = InputType.Number;
	});
	window.document.querySelector("#submit_btn").addEventListener("click",function() {
		if(_gthis.workspace != null) {
			var _g = _gthis.inputType;
			switch(_g[1]) {
			case 0:
				var txt = document.querySelector("#input_bar").value;
				var text = new editor_workspace_nodes_Text(txt);
				text.x = -_gthis.workspace.x + _gthis.width / 2 - text.width;
				text.y = -_gthis.workspace.y + _gthis.height / 2;
				_gthis.workspace.addNode(text);
				break;
			case 1:
				var txt1 = document.querySelector("#input_bar").value;
				var text1 = new editor_workspace_nodes_Symbol(txt1);
				text1.x = -_gthis.workspace.x + _gthis.width / 2 - text1.width;
				text1.y = -_gthis.workspace.y + _gthis.height / 2;
				_gthis.workspace.addNode(text1);
				break;
			case 2:
				var txt2 = document.querySelector("#input_bar").value;
				var num = parseFloat(txt2);
				if(!isNaN(num)) {
					var number = new editor_workspace_nodes_Number(num);
					number.x = -_gthis.workspace.x + _gthis.width / 2 - number.width;
					number.y = -_gthis.workspace.y + _gthis.height / 2;
					_gthis.workspace.addNode(number);
				}
				break;
			}
		}
	});
	window.document.querySelector("#picture_btn").addEventListener("click",function() {
		if(_gthis.workspace != null && _gthis.pictureSelector != null) {
			_gthis.pictureSelector.visible = true;
		}
	});
	window.document.querySelector("#bool_btn").addEventListener("click",function() {
		if(_gthis.workspace != null && _gthis.boolSelector != null) {
			_gthis.boolSelector.visible = true;
		}
	});
	window.document.querySelector("#lambda_btn").addEventListener("click",function() {
		if(_gthis.workspace != null) {
			var args = _gthis.workspace.selectedNodes.first();
			if(args == null) {
				return;
			}
			var _g1 = args.type;
			if(_g1[1] != 5) {
				return;
			}
			var llist = new List();
			var _g1_head = _gthis.workspace.selectedNodes.h;
			while(_g1_head != null) {
				var val = _g1_head.item;
				_g1_head = _g1_head.next;
				var i = val;
				llist.add(i);
			}
			llist.push(new editor_workspace_nodes_LambdaPicture());
			var lambda = new editor_workspace_nodes_Lambda(llist);
			lambda.x = -_gthis.workspace.x + _gthis.width / 2 - lambda.width;
			lambda.y = -_gthis.workspace.y + _gthis.height / 2;
			_gthis.workspace.addNode(lambda);
		}
	});
	window.document.querySelector("#parens_btn").addEventListener("click",function() {
		if(_gthis.workspace != null) {
			var args1 = _gthis.workspace.selectedNodes.first();
			if(args1 == null) {
				return;
			}
			var llist1 = new List();
			var _g_head = _gthis.workspace.selectedNodes.h;
			while(_g_head != null) {
				var val1 = _g_head.item;
				_g_head = _g_head.next;
				var i1 = val1;
				llist1.add(i1);
			}
			var parens = new editor_workspace_ListNode(llist1);
			parens.x = -_gthis.workspace.x + _gthis.width / 2 - parens.width;
			parens.y = -_gthis.workspace.y + _gthis.height / 2;
			_gthis.workspace.addNode(parens);
		}
	});
	window.document.querySelector("#def_btn").addEventListener("click",function() {
		if(_gthis.workspace != null) {
			var args2 = _gthis.workspace.selectedNodes.first();
			if(args2 == null) {
				return;
			}
			var llist2 = new List();
			var _g_head1 = _gthis.workspace.selectedNodes.h;
			while(_g_head1 != null) {
				var val2 = _g_head1.item;
				_g_head1 = _g_head1.next;
				var i2 = val2;
				llist2.add(i2);
			}
			llist2.push(new editor_workspace_nodes_Define());
			var parens1 = new editor_workspace_ListNode(llist2);
			parens1.x = -_gthis.workspace.x + _gthis.width / 2 - parens1.width;
			parens1.y = -_gthis.workspace.y + _gthis.height / 2;
			_gthis.workspace.addNode(parens1);
		}
	});
	window.document.querySelector("#quote_btn").addEventListener("click",function() {
		if(_gthis.workspace != null) {
			var args3 = _gthis.workspace.selectedNodes.first();
			if(args3 == null) {
				return;
			}
			var llist3 = new List();
			var _g_head2 = _gthis.workspace.selectedNodes.h;
			while(_g_head2 != null) {
				var val3 = _g_head2.item;
				_g_head2 = _g_head2.next;
				var i3 = val3;
				llist3.add(i3);
			}
			llist3.push(new editor_workspace_nodes_Quote());
			var parens2 = new editor_workspace_ListNode(llist3);
			parens2.x = -_gthis.workspace.x + _gthis.width / 2 - parens2.width;
			parens2.y = -_gthis.workspace.y + _gthis.height / 2;
			_gthis.workspace.addNode(parens2);
		}
	});
	window.document.querySelector("#if_btn").addEventListener("click",function() {
		if(_gthis.workspace != null) {
			var args4 = _gthis.workspace.selectedNodes.first();
			if(args4 == null) {
				return;
			}
			var llist4 = new List();
			var _g_head3 = _gthis.workspace.selectedNodes.h;
			while(_g_head3 != null) {
				var val4 = _g_head3.item;
				_g_head3 = _g_head3.next;
				var i4 = val4;
				llist4.add(i4);
			}
			llist4.push(new editor_workspace_nodes_Conditional());
			var parens3 = new editor_workspace_ListNode(llist4);
			parens3.x = -_gthis.workspace.x + _gthis.width / 2 - parens3.width;
			parens3.y = -_gthis.workspace.y + _gthis.height / 2;
			_gthis.workspace.addNode(parens3);
		}
	});
	window.document.querySelector("#list_btn").addEventListener("click",function() {
		if(_gthis.workspace != null) {
			var args5 = _gthis.workspace.selectedNodes.first();
			if(args5 == null) {
				return;
			}
			var llist5 = new List();
			var _g_head4 = _gthis.workspace.selectedNodes.h;
			while(_g_head4 != null) {
				var val5 = _g_head4.item;
				_g_head4 = _g_head4.next;
				var i5 = val5;
				llist5.add(i5);
			}
			llist5.push(new editor_workspace_nodes_ListSymbol());
			var parens4 = new editor_workspace_ListNode(llist5);
			parens4.x = -_gthis.workspace.x + _gthis.width / 2 - parens4.width;
			parens4.y = -_gthis.workspace.y + _gthis.height / 2;
			_gthis.workspace.addNode(parens4);
		}
	});
	window.document.querySelector("#begin_btn").addEventListener("click",function() {
		if(_gthis.workspace != null) {
			var args6 = _gthis.workspace.selectedNodes.first();
			if(args6 == null) {
				return;
			}
			var llist6 = new List();
			var _g_head5 = _gthis.workspace.selectedNodes.h;
			while(_g_head5 != null) {
				var val6 = _g_head5.item;
				_g_head5 = _g_head5.next;
				var i6 = val6;
				llist6.add(i6);
			}
			llist6.push(new editor_workspace_nodes_Begin());
			var parens5 = new editor_workspace_ListNode(llist6);
			parens5.x = -_gthis.workspace.x + _gthis.width / 2 - parens5.width;
			parens5.y = -_gthis.workspace.y + _gthis.height / 2;
			_gthis.workspace.addNode(parens5);
		}
	});
	this.backgroundColor = 16119260;
	this.width = window.innerWidth;
	this.height = window.innerHeight;
	this.position = "fixed";
	this.antialias = true;
	pixi_plugins_app_Application.prototype.start.call(this,null,window.document.body);
	this.loader = new PIXI.loaders.Loader("assets/");
	this.loader.add("cursor","cursor.png");
	this.loader.add("lambda","lambda.png");
	this.loader.add("hand","hand.png");
	this.loader.add("eval","eval.png");
	this.loader.add("closure","closure.png");
	this.loader.add("magnifier","magnifier.png");
	this.loader.add("pictures","pictures.json");
	this.loader.load($bind(this,this.init));
};
Main.__name__ = true;
Main.main = function() {
	new Main();
};
Main.__super__ = pixi_plugins_app_Application;
Main.prototype = $extend(pixi_plugins_app_Application.prototype,{
	init: function() {
		var _gthis = this;
		this.pointerState = PointerBehaviourType.Select;
		this.isDragging = false;
		this.onUpdate = $bind(this,this.update);
		var screenUnselectLayer = new PIXI.Container();
		screenUnselectLayer.hitArea = new PIXI.Rectangle(0,0,this.width,this.height);
		screenUnselectLayer.interactive = true;
		screenUnselectLayer.on("pointerdown",function() {
			if(_gthis.workspace != null) {
				_gthis.workspace.clearSelection();
			}
		});
		this.stage.addChild(screenUnselectLayer);
		this.workspace = new editor_workspace_Workspace();
		this.wsPosBuffer = new PIXI.Point(this.workspace.position.x,this.workspace.position.y);
		this.stage.addChild(this.workspace);
		var screenTransformLayer = new PIXI.Container();
		screenTransformLayer.hitArea = new PIXI.Rectangle(0,0,this.width,this.height);
		screenTransformLayer.interactive = true;
		screenTransformLayer.visible = false;
		screenTransformLayer.on("pointerdown",$bind(this,this.onDragStart));
		screenTransformLayer.on("pointerup",$bind(this,this.onDragEnd));
		screenTransformLayer.on("pointermove",$bind(this,this.onDragMove));
		this.stage.addChild(screenTransformLayer);
		var cursorSelector = new editor_gui_CursorSelector(function() {
			_gthis.pointerState = PointerBehaviourType.Select;
			screenTransformLayer.visible = false;
			_gthis.setCursor(PointerBehaviourType.Select);
		},function() {
			_gthis.pointerState = PointerBehaviourType.Move;
			screenTransformLayer.visible = true;
			_gthis.setCursor(PointerBehaviourType.Move);
		},function() {
			_gthis.pointerState = PointerBehaviourType.Zoom;
			screenTransformLayer.visible = true;
			_gthis.setCursor(PointerBehaviourType.Zoom);
		});
		cursorSelector.position.x = 10;
		cursorSelector.position.y = 10;
		this.stage.addChild(cursorSelector);
		var scaleSelector = new editor_gui_ScaleSelector(function() {
			_gthis.workspace.zoom(-0.1);
		},function() {
			_gthis.workspace.zoom(0.1);
		});
		scaleSelector.position.x = 10;
		scaleSelector.position.y = this.height - 45;
		this.stage.addChild(scaleSelector);
		this.pictureSelector = new editor_gui_PictureSelector(this.width * 0.25,this.height * 0.1,this.width / 2,this.height * 0.8,this.workspace,this);
		this.pictureSelector.visible = false;
		this.stage.addChild(this.pictureSelector);
		this.boolSelector = new editor_gui_BoolSelector(this.width * 0.25,this.height * 0.3,this.width / 2,this.height * 0.3,this.workspace,this);
		this.boolSelector.visible = false;
		this.stage.addChild(this.boolSelector);
		this.evalSelector = new editor_gui_EvalSelector(function() {
			var expr = _gthis.evaluator["eval"](_gthis.workspace.selectedNodes.first().astfize(),_gthis.evaluator.globalScope);
			var rExpr = _gthis.evaluator.objectize(expr);
			if(rExpr == null) {
				return;
			}
			var node;
			switch(rExpr[1]) {
			case 0:
				var number = rExpr[2];
				node = new editor_workspace_nodes_Number(number);
				break;
			case 1:
				var string = rExpr[2];
				node = new editor_workspace_nodes_Text(string);
				break;
			case 2:
				var string1 = rExpr[2];
				node = new editor_workspace_nodes_Symbol(string1);
				break;
			case 3:
				var $boolean = rExpr[2];
				node = new editor_workspace_nodes_Boolean($boolean);
				break;
			case 4:
				var y = rExpr[3];
				var x = rExpr[2];
				node = new editor_workspace_nodes_Picture(x,y);
				break;
			case 5:
				var list = rExpr[2];
				node = new editor_workspace_ListNode(list);
				break;
			default:
				node = null;
			}
			if(node != null) {
				node.x = -_gthis.workspace.x + _gthis.width / 2 - node.width;
				node.y = -_gthis.workspace.y + _gthis.height / 2;
				_gthis.workspace.addNode(node);
			}
		});
		this.evalSelector.position.set(150,10);
		this.evalSelector.visible = false;
		this.workspace.evalSelector = this.evalSelector;
		this.stage.addChild(this.evalSelector);
	}
	,setCursor: function(type) {
		var tmp;
		switch(type[1]) {
		case 0:
			tmp = "default";
			break;
		case 1:
			tmp = "zoom-in";
			break;
		case 2:
			tmp = "grab";
			break;
		}
		window.document.body.style.cursor = tmp;
	}
	,onDragStart: function(event) {
		var _g = this.pointerState;
		switch(_g[1]) {
		case 0:
			break;
		case 1:
			var button = js_Boot.__cast(event.data.originalEvent.button , Int);
			if(button == 0) {
				this.workspace.zoom(0.1);
			} else if(button == 2) {
				this.workspace.zoom(-0.1);
			}
			break;
		case 2:
			this.dragStart = event.data.getLocalPosition(this.stage);
			this.dragData = event.data;
			this.isDragging = true;
			this.wsPosBuffer.x = this.workspace.position.x;
			this.wsPosBuffer.y = this.workspace.position.y;
			break;
		}
	}
	,onDragMove: function() {
		if(this.pointerState == PointerBehaviourType.Move && this.isDragging) {
			this.dragEnd = this.dragData.getLocalPosition(this.stage);
			this.dragEnd.x -= this.dragStart.x;
			this.dragEnd.y -= this.dragStart.y;
			this.workspace.position.x = this.wsPosBuffer.x + this.dragEnd.x;
			this.workspace.position.y = this.wsPosBuffer.y + this.dragEnd.y;
		}
	}
	,onDragEnd: function() {
		if(this.pointerState == PointerBehaviourType.Move) {
			this.isDragging = false;
		}
	}
	,update: function(e) {
	}
	,__class__: Main
});
Math.__name__ = true;
var Perf = $hx_exports["Perf"] = function(pos,offset) {
	if(offset == null) {
		offset = 0;
	}
	if(pos == null) {
		pos = "TR";
	}
	this._perfObj = window.performance;
	if(Reflect.field(this._perfObj,"memory") != null) {
		this._memoryObj = Reflect.field(this._perfObj,"memory");
	}
	this._memCheck = this._perfObj != null && this._memoryObj != null && this._memoryObj.totalJSHeapSize > 0;
	this._pos = pos;
	this._offset = offset;
	this.currentFps = 60;
	this.currentMs = 0;
	this.currentMem = "0";
	this.lowFps = 60;
	this.avgFps = 60;
	this._measureCount = 0;
	this._totalFps = 0;
	this._time = 0;
	this._ticks = 0;
	this._fpsMin = 60;
	this._fpsMax = 60;
	this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
	this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	this._createFpsDom();
	this._createMsDom();
	if(this._memCheck) {
		this._createMemoryDom();
	}
	if(($_=window,$bind($_,$_.requestAnimationFrame)) != null) {
		this.RAF = ($_=window,$bind($_,$_.requestAnimationFrame));
	} else if(window.mozRequestAnimationFrame != null) {
		this.RAF = window.mozRequestAnimationFrame;
	} else if(window.webkitRequestAnimationFrame != null) {
		this.RAF = window.webkitRequestAnimationFrame;
	} else if(window.msRequestAnimationFrame != null) {
		this.RAF = window.msRequestAnimationFrame;
	}
	if(($_=window,$bind($_,$_.cancelAnimationFrame)) != null) {
		this.CAF = ($_=window,$bind($_,$_.cancelAnimationFrame));
	} else if(window.mozCancelAnimationFrame != null) {
		this.CAF = window.mozCancelAnimationFrame;
	} else if(window.webkitCancelAnimationFrame != null) {
		this.CAF = window.webkitCancelAnimationFrame;
	} else if(window.msCancelAnimationFrame != null) {
		this.CAF = window.msCancelAnimationFrame;
	}
	if(this.RAF != null) {
		this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
	}
};
Perf.__name__ = true;
Perf.prototype = {
	_init: function() {
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_now: function() {
		if(this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null) {
			return this._perfObj.now();
		} else {
			return new Date().getTime();
		}
	}
	,_tick: function(val) {
		var time = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
		this._ticks++;
		if(this._raf != null && time > this._prevTime + Perf.MEASUREMENT_INTERVAL) {
			this.currentMs = Math.round(time - this._startTime);
			this.ms.innerHTML = "MS: " + this.currentMs;
			this.currentFps = Math.round(this._ticks * 1000 / (time - this._prevTime));
			if(this.currentFps > 0 && val > Perf.DELAY_TIME) {
				this._measureCount++;
				this._totalFps += this.currentFps;
				this.lowFps = this._fpsMin = Math.min(this._fpsMin,this.currentFps);
				this._fpsMax = Math.max(this._fpsMax,this.currentFps);
				this.avgFps = Math.round(this._totalFps / this._measureCount);
			}
			this.fps.innerHTML = "FPS: " + this.currentFps + " (" + this._fpsMin + "-" + this._fpsMax + ")";
			if(this.currentFps >= 30) {
				this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
			} else if(this.currentFps >= 15) {
				this.fps.style.backgroundColor = Perf.FPS_WARN_BG_CLR;
			} else {
				this.fps.style.backgroundColor = Perf.FPS_PROB_BG_CLR;
			}
			this._prevTime = time;
			this._ticks = 0;
			if(this._memCheck) {
				this.currentMem = this._getFormattedSize(this._memoryObj.usedJSHeapSize,2);
				this.memory.innerHTML = "MEM: " + this.currentMem;
			}
		}
		this._startTime = time;
		if(this._raf != null) {
			this._raf = this.RAF.apply(window,[$bind(this,this._tick)]);
		}
	}
	,_createDiv: function(id,top) {
		if(top == null) {
			top = 0;
		}
		var div = window.document.createElement("div");
		div.id = id;
		div.className = id;
		div.style.position = "absolute";
		var _g = this._pos;
		switch(_g) {
		case "BL":
			div.style.left = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "BR":
			div.style.right = this._offset + "px";
			div.style.bottom = (this._memCheck ? 48 : 32) - top + "px";
			break;
		case "TL":
			div.style.left = this._offset + "px";
			div.style.top = top + "px";
			break;
		case "TR":
			div.style.right = this._offset + "px";
			div.style.top = top + "px";
			break;
		}
		div.style.width = "80px";
		div.style.height = "12px";
		div.style.lineHeight = "12px";
		div.style.padding = "2px";
		div.style.fontFamily = Perf.FONT_FAMILY;
		div.style.fontSize = "9px";
		div.style.fontWeight = "bold";
		div.style.textAlign = "center";
		window.document.body.appendChild(div);
		return div;
	}
	,_createFpsDom: function() {
		this.fps = this._createDiv("fps");
		this.fps.style.backgroundColor = Perf.FPS_BG_CLR;
		this.fps.style.zIndex = "995";
		this.fps.style.color = Perf.FPS_TXT_CLR;
		this.fps.innerHTML = "FPS: 0";
	}
	,_createMsDom: function() {
		this.ms = this._createDiv("ms",16);
		this.ms.style.backgroundColor = Perf.MS_BG_CLR;
		this.ms.style.zIndex = "996";
		this.ms.style.color = Perf.MS_TXT_CLR;
		this.ms.innerHTML = "MS: 0";
	}
	,_createMemoryDom: function() {
		this.memory = this._createDiv("memory",32);
		this.memory.style.backgroundColor = Perf.MEM_BG_CLR;
		this.memory.style.color = Perf.MEM_TXT_CLR;
		this.memory.style.zIndex = "997";
		this.memory.innerHTML = "MEM: 0";
	}
	,_getFormattedSize: function(bytes,frac) {
		if(frac == null) {
			frac = 0;
		}
		var sizes = ["Bytes","KB","MB","GB","TB"];
		if(bytes == 0) {
			return "0";
		}
		var precision = Math.pow(10,frac);
		var i = Math.floor(Math.log(bytes) / Math.log(1024));
		return Math.round(bytes * precision / Math.pow(1024,i)) / precision + " " + sizes[i];
	}
	,addInfo: function(val) {
		this.info = this._createDiv("info",this._memCheck ? 48 : 32);
		this.info.style.backgroundColor = Perf.INFO_BG_CLR;
		this.info.style.color = Perf.INFO_TXT_CLR;
		this.info.style.zIndex = "998";
		this.info.innerHTML = val;
	}
	,clearInfo: function() {
		if(this.info != null) {
			window.document.body.removeChild(this.info);
			this.info = null;
		}
	}
	,destroy: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
		this._perfObj = null;
		this._memoryObj = null;
		if(this.fps != null) {
			window.document.body.removeChild(this.fps);
			this.fps = null;
		}
		if(this.ms != null) {
			window.document.body.removeChild(this.ms);
			this.ms = null;
		}
		if(this.memory != null) {
			window.document.body.removeChild(this.memory);
			this.memory = null;
		}
		this.clearInfo();
		this.currentFps = 60;
		this.currentMs = 0;
		this.currentMem = "0";
		this.lowFps = 60;
		this.avgFps = 60;
		this._measureCount = 0;
		this._totalFps = 0;
		this._time = 0;
		this._ticks = 0;
		this._fpsMin = 60;
		this._fpsMax = 60;
		this._startTime = this._perfObj != null && ($_=this._perfObj,$bind($_,$_.now)) != null ? this._perfObj.now() : new Date().getTime();
		this._prevTime = -Perf.MEASUREMENT_INTERVAL;
	}
	,_cancelRAF: function() {
		this.CAF.apply(window,[this._raf]);
		this._raf = null;
	}
	,__class__: Perf
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.compare = function(a,b) {
	if(a == b) {
		return 0;
	} else if(a > b) {
		return 1;
	} else {
		return -1;
	}
};
Reflect.isEnumValue = function(v) {
	if(v != null) {
		return v.__enum__ != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var editor_gui_BoolSelector = function(x,y,width,height,workspace,app) {
	var _gthis = this;
	PIXI.Container.call(this);
	this.app = app;
	this.workspace = workspace;
	var graphic = new PIXI.Graphics();
	graphic.lineStyle(5);
	graphic.beginFill(2236962,0.5);
	graphic.drawRoundedRect(x,y,width,height,10);
	graphic.endFill();
	this.addChild(graphic);
	var trBtn = new editor_gui_SelectorElement(editor_gui_ButtonAlignType.Center,width * 0.2,height * 0.20,null,"true");
	trBtn.position.set(x + width * 0.2,y + height * 0.26);
	trBtn.on("pointerdown",function() {
		var bool = new editor_workspace_nodes_Boolean(true);
		bool.position.set(-workspace.x + app.width / 2,-workspace.y + app.height / 2 - 128);
		workspace.addNode(bool);
	});
	this.addChild(trBtn);
	var flBtn = new editor_gui_SelectorElement(editor_gui_ButtonAlignType.Center,width * 0.2,height * 0.20,null,"false");
	flBtn.position.set(x + width * 0.6,y + height * 0.26);
	flBtn.on("pointerdown",function() {
		var bool1 = new editor_workspace_nodes_Boolean(false);
		bool1.position.set(-workspace.x + app.width / 2,-workspace.y + app.height / 2 - 128);
		workspace.addNode(bool1);
	});
	this.addChild(flBtn);
	var btn = new editor_gui_SelectorElement(editor_gui_ButtonAlignType.Center,width * 0.2,height * 0.20,null,"Выход");
	btn.position.set(x + width * 0.4,y + height * 0.62);
	btn.on("pointerdown",function() {
		_gthis.visible = false;
	});
	this.addChild(btn);
};
editor_gui_BoolSelector.__name__ = true;
editor_gui_BoolSelector.__super__ = PIXI.Container;
editor_gui_BoolSelector.prototype = $extend(PIXI.Container.prototype,{
	__class__: editor_gui_BoolSelector
});
var editor_gui_CursorSelector = function(cursorHandler,handHandler,magnifierHandler) {
	PIXI.Container.call(this);
	this.interactive = true;
	var left = new editor_gui_SelectorElement(editor_gui_ButtonAlignType.Left,50,25,PIXI.Texture.from("assets/cursor.png"));
	left.on("pointerdown",cursorHandler);
	var center = new editor_gui_SelectorElement(editor_gui_ButtonAlignType.Center,50,25,PIXI.Texture.from("assets/hand.png"));
	center.position.x = 50;
	center.on("pointerdown",handHandler);
	var right = new editor_gui_SelectorElement(editor_gui_ButtonAlignType.Right,50,25,PIXI.Texture.from("assets/magnifier.png"));
	right.position.x = 100;
	right.on("pointerdown",magnifierHandler);
	this.addChild(left);
	this.addChild(center);
	this.addChild(right);
};
editor_gui_CursorSelector.__name__ = true;
editor_gui_CursorSelector.__super__ = PIXI.Container;
editor_gui_CursorSelector.prototype = $extend(PIXI.Container.prototype,{
	__class__: editor_gui_CursorSelector
});
var editor_gui_EvalSelector = function(handler) {
	PIXI.Container.call(this);
	this.interactive = true;
	var button = new editor_gui_SelectorElement(editor_gui_ButtonAlignType.Center,50,25,PIXI.Texture.from("assets/eval.png"));
	button.position.x = 50;
	button.on("pointerdown",handler);
	this.addChild(button);
};
editor_gui_EvalSelector.__name__ = true;
editor_gui_EvalSelector.__super__ = PIXI.Container;
editor_gui_EvalSelector.prototype = $extend(PIXI.Container.prototype,{
	__class__: editor_gui_EvalSelector
});
var editor_gui_PictureItem = function(i,j,pParent) {
	PIXI.Container.call(this);
	this.horiz = j;
	this.vert = i;
	this.pParent = pParent;
	this.on("pointerdown",$bind(this,this.onButton));
	this.addChild(PIXI.Sprite.from("pictures_" + i + "_" + j + ".png"));
};
editor_gui_PictureItem.__name__ = true;
editor_gui_PictureItem.__super__ = PIXI.Container;
editor_gui_PictureItem.prototype = $extend(PIXI.Container.prototype,{
	onButton: function() {
		var picture = new editor_workspace_nodes_Picture(this.vert,this.horiz);
		picture.position.set(-this.pParent.workspace.x + this.pParent.app.width / 2,-this.pParent.workspace.y + this.pParent.app.height / 2);
		this.pParent.workspace.addNode(picture);
	}
	,__class__: editor_gui_PictureItem
});
var editor_gui_PictureSelector = function(x,y,width,height,workspace,app) {
	var _gthis = this;
	PIXI.Container.call(this);
	this.app = app;
	this.workspace = workspace;
	var graphic = new PIXI.Graphics();
	graphic.lineStyle(5);
	graphic.beginFill(2236962,0.95);
	graphic.drawRoundedRect(x,y,width,height,10);
	graphic.endFill();
	this.addChild(graphic);
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var _g1 = 0;
		while(_g1 < 15) {
			var j = _g1++;
			var sprite = new editor_gui_PictureItem(i,j,this);
			sprite.position.set(i * (width * 0.8 / 16) + x * 1.2,j * (height * 0.9 / 15) + y * 1.1);
			sprite.width = sprite.height = width / 32;
			sprite.interactive = true;
			sprite.buttonMode = true;
			this.addChild(sprite);
		}
	}
	var btn = new editor_gui_SelectorElement(editor_gui_ButtonAlignType.Center,width * 0.2,height * 0.05,null,"Выход");
	btn.position.set(x + width * 0.4,y + height * 0.92);
	btn.on("pointerdown",function() {
		_gthis.visible = false;
	});
	this.addChild(btn);
};
editor_gui_PictureSelector.__name__ = true;
editor_gui_PictureSelector.__super__ = PIXI.Container;
editor_gui_PictureSelector.prototype = $extend(PIXI.Container.prototype,{
	__class__: editor_gui_PictureSelector
});
var editor_gui_ScaleSelector = function(decreaseHandler,increaseHandler) {
	PIXI.Container.call(this);
	this.interactive = true;
	var left = new editor_gui_SelectorElement(editor_gui_ButtonAlignType.Left,75,25,null,"-");
	left.on("pointerdown",decreaseHandler);
	var right = new editor_gui_SelectorElement(editor_gui_ButtonAlignType.Right,75,25,null,"+");
	right.position.x = 75;
	right.on("pointerdown",increaseHandler);
	this.addChild(left);
	this.addChild(right);
};
editor_gui_ScaleSelector.__name__ = true;
editor_gui_ScaleSelector.__super__ = PIXI.Container;
editor_gui_ScaleSelector.prototype = $extend(PIXI.Container.prototype,{
	__class__: editor_gui_ScaleSelector
});
var editor_gui_ButtonAlignType = { __ename__ : true, __constructs__ : ["Left","Center","Right"] };
editor_gui_ButtonAlignType.Left = ["Left",0];
editor_gui_ButtonAlignType.Left.__enum__ = editor_gui_ButtonAlignType;
editor_gui_ButtonAlignType.Center = ["Center",1];
editor_gui_ButtonAlignType.Center.__enum__ = editor_gui_ButtonAlignType;
editor_gui_ButtonAlignType.Right = ["Right",2];
editor_gui_ButtonAlignType.Right.__enum__ = editor_gui_ButtonAlignType;
var editor_gui_SelectorElement = function(type,width,height,image,text) {
	PIXI.Container.call(this);
	this.interactive = true;
	this.buttonMode = true;
	var graphic = new PIXI.Graphics();
	graphic.beginFill(2236962);
	graphic.lineStyle(0.5,16119260);
	switch(type[1]) {
	case 0:
		graphic.drawRoundedRect(0,0,width,height,8);
		graphic.lineStyle(0);
		graphic.drawRect(8,0,width - 8,height);
		graphic.lineStyle(0.5,16119260);
		graphic.drawRect(width - 1,0,1,height);
		break;
	case 1:
		graphic.drawRect(0,0,width,height);
		break;
	case 2:
		graphic.drawRoundedRect(0,0,width,height,8);
		graphic.lineStyle(0);
		graphic.drawRect(0,0,width - 8,height);
		graphic.lineStyle(0.5,16119260);
		graphic.drawRect(0,0,1,height);
		break;
	}
	graphic.endFill();
	this.addChild(graphic);
	if(image != null) {
		var sprite = new PIXI.Sprite(image);
		sprite.scale.x = 0.8;
		sprite.scale.y = 0.8;
		sprite.position.x = 16;
		sprite.position.y = 2.5;
		this.addChild(sprite);
	}
	if(text != null) {
		var grText = new PIXI.Text(text,{ fill : 16777215});
		grText.position.x = (width - grText.width) / 2;
		grText.position.y = -2.5;
		this.addChild(grText);
	}
};
editor_gui_SelectorElement.__name__ = true;
editor_gui_SelectorElement.__super__ = PIXI.Container;
editor_gui_SelectorElement.prototype = $extend(PIXI.Container.prototype,{
	__class__: editor_gui_SelectorElement
});
var editor_workspace_Node = function() {
	this.isDrag = false;
	this.isSelected = false;
	var _gthis = this;
	PIXI.Container.call(this);
	this.interactive = true;
	this.buttonMode = true;
	this.initGraphic();
	this.selectGraphic = new PIXI.Graphics();
	this.selectGraphic.beginFill(15794176,0.25);
	this.selectGraphic.drawRect(0,0,256,256);
	this.selectGraphic.endFill();
	this.selectGraphic.visible = false;
	this.on("pointerdown",function(e) {
		_gthis.data = e.data;
		_gthis.isDrag = true;
		_gthis.select();
	});
	this.on("pointermove",$bind(this,this.move));
	this.on("pointerupoutside",$bind(this,this.dragExit));
	this.on("pointerup",$bind(this,this.dragExit));
	this.addChild(this.selectGraphic);
};
editor_workspace_Node.__name__ = true;
editor_workspace_Node.__super__ = PIXI.Container;
editor_workspace_Node.prototype = $extend(PIXI.Container.prototype,{
	initGraphic: function() {
	}
	,setWorkspace: function(workspace) {
		this.workspace = workspace;
	}
	,unsetWorkspace: function() {
		this.workspace = null;
	}
	,select: function() {
		if(this.isSelected || this.workspace == null) {
			return;
		}
		this.isSelected = true;
		this.selectGraphic.width = this.width;
		this.selectGraphic.height = this.height;
		this.selectGraphic.visible = true;
		if(this.workspace != null) {
			if(this.workspace.shiftPressed == false) {
				this.workspace.clearSelection();
				if(this.workspace.evalSelector != null) {
					this.workspace.evalSelector.visible = true;
				}
			} else if(this.workspace.evalSelector != null) {
				this.workspace.evalSelector.visible = false;
			}
			this.workspace.recordSelection(this);
		}
	}
	,unselect: function() {
		this.isSelected = false;
		this.selectGraphic.visible = false;
		if(this.workspace != null) {
			this.workspace.dispatchSelection(this);
		}
	}
	,serialize: function() {
		var out;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			var number = _g[2];
			out = "{\"type\": \"number\",\"value\": \"" + number + "\",\"x\": " + this.position.x + ", \"y\": " + this.position.x + ", \"w\": " + this.width + ", \"h\": " + this.height + ",\"children\": []}";
			break;
		case 1:
			var string = _g[2];
			out = "{\"type\": \"string\",\"value\": \"" + string + "\",\"x\": " + this.position.x + ", \"y\": " + this.position.y + ", \"w\": " + this.width + ", \"h\": " + this.height + ",\"children\": []}";
			break;
		case 2:
			var string1 = _g[2];
			out = "{\"type\": \"string\",\"value\": \"" + string1 + "\",\"x\": " + this.position.x + ", \"y\": " + this.position.y + ", \"w\": " + this.width + ", \"h\": " + this.height + ",\"children\": []}";
			break;
		case 3:
			var $boolean = _g[2];
			out = "{\"type\": \"boolean\",\"value\": \"" + ($boolean == null ? "null" : "" + $boolean) + "\",\"x\": " + this.position.x + ", \"y\": " + this.position.y + ", \"w\": " + this.width + ", \"h\": " + this.height + ",\"children\": []}";
			break;
		case 4:
			var yy = _g[3];
			var xx = _g[2];
			out = "{\"type\": \"picture\",\"value\": \"" + xx + "_" + yy + "\",\"x\": " + this.position.x + ", \"y\": " + this.position.y + ", \"w\": " + this.width + ", \"h\": " + this.height + ",\"children\": []}";
			break;
		case 5:
			var list = _g[2];
			var resultString = "";
			var _g_head = list.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var i = val;
				resultString += i.serialize() + ",";
			}
			resultString = HxOverrides.substr(resultString,0,resultString.length - 1);
			out = "{\"type\": \"parens\",\"value\": \"\",\"x\": " + this.position.x + ", \"y\": " + this.position.y + ", \"w\": " + this.width + ", \"h\": " + this.height + ",\"children\": [" + resultString + "]}";
			break;
		case 6:
			out = "{\"type\": \"lambda\",\"value\": \"lambda\",\"x\": " + this.position.x + ", \"y\": " + this.position.y + ", \"w\": " + this.width + ", \"h\": " + this.height + ",\"children\": []}";
			break;
		case 7:
			out = "{\"type\": \"quote\",\"value\": \"quote\",\"x\": " + this.position.x + ", \"y\": " + this.position.y + ", \"w\": " + this.width + ", \"h\": " + this.height + ",\"children\": []}";
			break;
		case 8:
			out = "{\"type\": \"if\",\"value\": \"if\",\"x\": " + this.position.x + ", \"y\": " + this.position.y + ", \"w\": " + this.width + ", \"h\": " + this.height + ",\"children\": []}";
			break;
		case 9:
			out = "{\"type\": \"define\",\"value\": \"define\",\"x\": " + this.position.x + ", \"y\": " + this.position.y + ", \"w\": " + this.width + ", \"h\": " + this.height + ",\"children\": []}";
			break;
		case 10:
			out = "{\"type\": \"list\",\"value\": \"lista\",\"x\": " + this.position.x + ", \"y\": " + this.position.y + ", \"w\": " + this.width + ", \"h\": " + this.height + ",\"children\": []}";
			break;
		case 11:
			out = "{\"type\": \"begin\",\"value\": \"begin\",\"x\": " + this.position.x + ", \"y\": " + this.position.y + ", \"w\": " + this.width + ", \"h\": " + this.height + ",\"children\": []}";
			break;
		}
		return out;
	}
	,astfize: function() {
		var out;
		var _g = this.type;
		switch(_g[1]) {
		case 0:
			var number = _g[2];
			out = interpreter_ASTType.ANumber(number);
			break;
		case 1:
			var string = _g[2];
			out = interpreter_ASTType.AString(string);
			break;
		case 2:
			var string1 = _g[2];
			out = interpreter_ASTType.ASymbol(string1);
			break;
		case 3:
			var $boolean = _g[2];
			out = interpreter_ASTType.ABoolean($boolean);
			break;
		case 4:
			var y = _g[3];
			var x = _g[2];
			out = interpreter_ASTType.APicture(x,y);
			break;
		case 5:
			var list = _g[2];
			var lst = new List();
			var _g_head = list.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var i = val;
				lst.add(i.astfize());
			}
			out = interpreter_ASTType.AList(lst);
			break;
		case 6:
			out = interpreter_ASTType.ALambda;
			break;
		case 7:
			out = interpreter_ASTType.AQuote;
			break;
		case 8:
			out = interpreter_ASTType.AIf;
			break;
		case 9:
			out = interpreter_ASTType.ADef;
			break;
		case 10:
			out = interpreter_ASTType.AListSymbol;
			break;
		case 11:
			out = interpreter_ASTType.ABegin;
			break;
		}
		return out;
	}
	,move: function() {
		if(this.isDrag) {
			var newPosition = this.data.getLocalPosition(this.workspace);
			var _g_head = this.workspace.selectedNodes.h;
			while(_g_head != null) {
				var val = _g_head.item;
				_g_head = _g_head.next;
				var i = val;
				if(i != this) {
					i.x = i.x - this.position.x + newPosition.x;
					i.y = i.y - this.position.y + newPosition.y;
				}
			}
			this.position.x = newPosition.x;
			this.position.y = newPosition.y;
		}
	}
	,dragExit: function() {
		this.isDrag = false;
		this.data = null;
	}
	,__class__: editor_workspace_Node
});
var editor_workspace_ListNode = function(list) {
	this.list = list;
	editor_workspace_Node.call(this);
	this.type = editor_workspace_RealType.RList(list);
};
editor_workspace_ListNode.__name__ = true;
editor_workspace_ListNode.__super__ = editor_workspace_Node;
editor_workspace_ListNode.prototype = $extend(editor_workspace_Node.prototype,{
	initGraphic: function() {
		this.graphic = new PIXI.Graphics();
		this.graphic.beginFill(61696,0.2);
		this.graphic.lineStyle(1,7936);
		this.graphic.drawRect(0,0,64,64);
		this.graphic.endFill();
		this.addChild(this.graphic);
		var _g_head = this.list.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var i = val;
			i.interactive = false;
			i.unselect();
			i.unsetWorkspace();
			i.setParent(this);
		}
		this.gridify();
	}
	,gridify: function() {
		var isFirst = true;
		var currentCellX = 0;
		var currentCellY = 0;
		var maxCellX = 0;
		var maxCellY = 0;
		var _g_head = this.list.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var i = val;
			if(isFirst) {
				i.position.set(8,8);
				++currentCellY;
				if(currentCellY > maxCellY) {
					maxCellY = currentCellY;
				}
				isFirst = false;
			} else if(currentCellX * 48 + i.width + 8 > 528) {
				currentCellX = 0;
				++currentCellY;
				if(currentCellY > maxCellY) {
					maxCellY = currentCellY;
				}
				i.position.x = currentCellX * 48 + 8;
				i.position.y = currentCellY * 48 + 8;
			} else {
				i.position.x = currentCellX * 48 + 8;
				i.position.y = currentCellY * 48 + 8;
				currentCellX += Math.ceil(i.width / 48);
				if(currentCellX > maxCellX) {
					maxCellX = currentCellX;
				}
			}
		}
		var leftUpperObject = this.list.first();
		var rightLowerObject = this.list.last();
		if(leftUpperObject != null) {
			this.graphic.height = rightLowerObject.y + rightLowerObject.height - leftUpperObject.y + 16;
		}
		this.graphic.width = maxCellX * 48 + 16;
		if(this.graphic.width < rightLowerObject.x + rightLowerObject.width - leftUpperObject.x) {
			this.graphic.width = Math.ceil((rightLowerObject.x + rightLowerObject.width - leftUpperObject.x) / 48) * 48 + 8;
		}
	}
	,__class__: editor_workspace_ListNode
});
var editor_workspace_RealType = { __ename__ : true, __constructs__ : ["RNumber","RString","RSymbol","RBoolean","RPicture","RList","RLambdaSymbol","RQuoteSymbol","RIfSymbol","RDefSymbol","RListSymbol","RBegin"] };
editor_workspace_RealType.RNumber = function(number) { var $x = ["RNumber",0,number]; $x.__enum__ = editor_workspace_RealType; return $x; };
editor_workspace_RealType.RString = function(string) { var $x = ["RString",1,string]; $x.__enum__ = editor_workspace_RealType; return $x; };
editor_workspace_RealType.RSymbol = function(string) { var $x = ["RSymbol",2,string]; $x.__enum__ = editor_workspace_RealType; return $x; };
editor_workspace_RealType.RBoolean = function($boolean) { var $x = ["RBoolean",3,$boolean]; $x.__enum__ = editor_workspace_RealType; return $x; };
editor_workspace_RealType.RPicture = function(x,y) { var $x = ["RPicture",4,x,y]; $x.__enum__ = editor_workspace_RealType; return $x; };
editor_workspace_RealType.RList = function(list) { var $x = ["RList",5,list]; $x.__enum__ = editor_workspace_RealType; return $x; };
editor_workspace_RealType.RLambdaSymbol = ["RLambdaSymbol",6];
editor_workspace_RealType.RLambdaSymbol.__enum__ = editor_workspace_RealType;
editor_workspace_RealType.RQuoteSymbol = ["RQuoteSymbol",7];
editor_workspace_RealType.RQuoteSymbol.__enum__ = editor_workspace_RealType;
editor_workspace_RealType.RIfSymbol = ["RIfSymbol",8];
editor_workspace_RealType.RIfSymbol.__enum__ = editor_workspace_RealType;
editor_workspace_RealType.RDefSymbol = ["RDefSymbol",9];
editor_workspace_RealType.RDefSymbol.__enum__ = editor_workspace_RealType;
editor_workspace_RealType.RListSymbol = ["RListSymbol",10];
editor_workspace_RealType.RListSymbol.__enum__ = editor_workspace_RealType;
editor_workspace_RealType.RBegin = ["RBegin",11];
editor_workspace_RealType.RBegin.__enum__ = editor_workspace_RealType;
var editor_workspace_Nest = { __ename__ : true, __constructs__ : ["Children","Nothing"] };
editor_workspace_Nest.Children = function(children) { var $x = ["Children",0,children]; $x.__enum__ = editor_workspace_Nest; return $x; };
editor_workspace_Nest.Nothing = ["Nothing",1];
editor_workspace_Nest.Nothing.__enum__ = editor_workspace_Nest;
var editor_workspace_Workspace = function() {
	this.shiftPressed = false;
	PIXI.Container.call(this);
	this.interactive = true;
	this.selectedNodes = new List();
};
editor_workspace_Workspace.__name__ = true;
editor_workspace_Workspace.__super__ = PIXI.Container;
editor_workspace_Workspace.prototype = $extend(PIXI.Container.prototype,{
	zoom: function(percent) {
		this.scale.x += percent;
		this.scale.y += percent;
	}
	,addNode: function(node) {
		this.addChild(node);
		node.setWorkspace(this);
	}
	,recordSelection: function(node) {
		this.selectedNodes.add(node);
	}
	,dispatchSelection: function(node) {
		this.selectedNodes.remove(node);
	}
	,deleteSelected: function() {
		var _g_head = this.selectedNodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var i = val;
			this.removeChild(i);
		}
	}
	,clearSelection: function() {
		var _g_head = this.selectedNodes.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var i = val;
			i.unselect();
		}
		if(this.evalSelector != null) {
			this.evalSelector.visible = false;
		}
	}
	,__class__: editor_workspace_Workspace
});
var editor_workspace_nodes_Boolean = function($boolean) {
	this.text = $boolean ? "true" : "false";
	editor_workspace_Node.call(this);
	this.type = editor_workspace_RealType.RBoolean($boolean);
};
editor_workspace_nodes_Boolean.__name__ = true;
editor_workspace_nodes_Boolean.__super__ = editor_workspace_Node;
editor_workspace_nodes_Boolean.prototype = $extend(editor_workspace_Node.prototype,{
	initGraphic: function() {
		this.txt = new PIXI.Text(this.text);
		this.txt.height = 32;
		this.addChild(this.txt);
	}
	,__class__: editor_workspace_nodes_Boolean
});
var editor_workspace_nodes_Lambda = function(list) {
	editor_workspace_ListNode.call(this,list);
};
editor_workspace_nodes_Lambda.__name__ = true;
editor_workspace_nodes_Lambda.__super__ = editor_workspace_ListNode;
editor_workspace_nodes_Lambda.prototype = $extend(editor_workspace_ListNode.prototype,{
	__class__: editor_workspace_nodes_Lambda
});
var editor_workspace_nodes_LambdaPicture = function() {
	editor_workspace_Node.call(this);
	this.type = editor_workspace_RealType.RLambdaSymbol;
};
editor_workspace_nodes_LambdaPicture.__name__ = true;
editor_workspace_nodes_LambdaPicture.__super__ = editor_workspace_Node;
editor_workspace_nodes_LambdaPicture.prototype = $extend(editor_workspace_Node.prototype,{
	initGraphic: function() {
		this.sprite = PIXI.Sprite.from("assets/lambda.png");
		this.addChild(this.sprite);
	}
	,__class__: editor_workspace_nodes_LambdaPicture
});
var editor_workspace_nodes_Number = function(number) {
	this.text = number == null ? "null" : "" + number;
	editor_workspace_Node.call(this);
	this.type = editor_workspace_RealType.RNumber(number);
};
editor_workspace_nodes_Number.__name__ = true;
editor_workspace_nodes_Number.__super__ = editor_workspace_Node;
editor_workspace_nodes_Number.prototype = $extend(editor_workspace_Node.prototype,{
	initGraphic: function() {
		this.txt = new PIXI.Text(this.text);
		this.txt.height = 32;
		this.addChild(this.txt);
	}
	,__class__: editor_workspace_nodes_Number
});
var editor_workspace_nodes_Picture = function(x,y) {
	this.text = "pictures_" + x + "_" + y + ".png";
	editor_workspace_Node.call(this);
	this.type = editor_workspace_RealType.RPicture(x,y);
};
editor_workspace_nodes_Picture.__name__ = true;
editor_workspace_nodes_Picture.__super__ = editor_workspace_Node;
editor_workspace_nodes_Picture.prototype = $extend(editor_workspace_Node.prototype,{
	initGraphic: function() {
		this.sprite = PIXI.Sprite.from(this.text);
		this.addChild(this.sprite);
	}
	,__class__: editor_workspace_nodes_Picture
});
var editor_workspace_nodes_Symbol = function(text) {
	this.text = text;
	editor_workspace_Node.call(this);
	this.type = editor_workspace_RealType.RSymbol(text);
};
editor_workspace_nodes_Symbol.__name__ = true;
editor_workspace_nodes_Symbol.__super__ = editor_workspace_Node;
editor_workspace_nodes_Symbol.prototype = $extend(editor_workspace_Node.prototype,{
	initGraphic: function() {
		this.txt = new PIXI.Text(this.text);
		this.txt.height = 32;
		this.addChild(this.txt);
	}
	,__class__: editor_workspace_nodes_Symbol
});
var editor_workspace_nodes_Quote = function() {
	editor_workspace_nodes_Symbol.call(this,"quote");
	this.type = editor_workspace_RealType.RQuoteSymbol;
	this.txt.style.fill = "#fe00ef";
};
editor_workspace_nodes_Quote.__name__ = true;
editor_workspace_nodes_Quote.__super__ = editor_workspace_nodes_Symbol;
editor_workspace_nodes_Quote.prototype = $extend(editor_workspace_nodes_Symbol.prototype,{
	__class__: editor_workspace_nodes_Quote
});
var editor_workspace_nodes_Conditional = function() {
	editor_workspace_nodes_Symbol.call(this,"if");
	this.type = editor_workspace_RealType.RIfSymbol;
	this.txt.style.fill = "#0000af";
};
editor_workspace_nodes_Conditional.__name__ = true;
editor_workspace_nodes_Conditional.__super__ = editor_workspace_nodes_Symbol;
editor_workspace_nodes_Conditional.prototype = $extend(editor_workspace_nodes_Symbol.prototype,{
	__class__: editor_workspace_nodes_Conditional
});
var editor_workspace_nodes_Define = function() {
	editor_workspace_nodes_Symbol.call(this,"define");
	this.type = editor_workspace_RealType.RDefSymbol;
	this.txt.style.fill = "#eeaeba";
};
editor_workspace_nodes_Define.__name__ = true;
editor_workspace_nodes_Define.__super__ = editor_workspace_nodes_Symbol;
editor_workspace_nodes_Define.prototype = $extend(editor_workspace_nodes_Symbol.prototype,{
	__class__: editor_workspace_nodes_Define
});
var editor_workspace_nodes_ListSymbol = function() {
	editor_workspace_nodes_Symbol.call(this,"list");
	this.type = editor_workspace_RealType.RListSymbol;
	this.txt.style.fill = "#faffaf";
};
editor_workspace_nodes_ListSymbol.__name__ = true;
editor_workspace_nodes_ListSymbol.__super__ = editor_workspace_nodes_Symbol;
editor_workspace_nodes_ListSymbol.prototype = $extend(editor_workspace_nodes_Symbol.prototype,{
	__class__: editor_workspace_nodes_ListSymbol
});
var editor_workspace_nodes_Begin = function() {
	editor_workspace_nodes_Symbol.call(this,"begin");
	this.type = editor_workspace_RealType.RBegin;
	this.txt.style.fill = "#faffaf";
};
editor_workspace_nodes_Begin.__name__ = true;
editor_workspace_nodes_Begin.__super__ = editor_workspace_nodes_Symbol;
editor_workspace_nodes_Begin.prototype = $extend(editor_workspace_nodes_Symbol.prototype,{
	__class__: editor_workspace_nodes_Begin
});
var editor_workspace_nodes_Text = function(text) {
	this.text = "\"" + text + "\"";
	editor_workspace_Node.call(this);
	this.type = editor_workspace_RealType.RString(text);
};
editor_workspace_nodes_Text.__name__ = true;
editor_workspace_nodes_Text.__super__ = editor_workspace_Node;
editor_workspace_nodes_Text.prototype = $extend(editor_workspace_Node.prototype,{
	initGraphic: function() {
		this.txt = new PIXI.Text(this.text);
		this.txt.height = 32;
		this.addChild(this.txt);
	}
	,__class__: editor_workspace_nodes_Text
});
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_BalancedTree = function() {
};
haxe_ds_BalancedTree.__name__ = true;
haxe_ds_BalancedTree.prototype = {
	set: function(key,value) {
		this.root = this.setLoop(key,value,this.root);
	}
	,get: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return node.value;
			}
			if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return null;
	}
	,exists: function(key) {
		var node = this.root;
		while(node != null) {
			var c = this.compare(key,node.key);
			if(c == 0) {
				return true;
			} else if(c < 0) {
				node = node.left;
			} else {
				node = node.right;
			}
		}
		return false;
	}
	,setLoop: function(k,v,node) {
		if(node == null) {
			return new haxe_ds_TreeNode(null,k,v,null);
		}
		var c = this.compare(k,node.key);
		if(c == 0) {
			return new haxe_ds_TreeNode(node.left,k,v,node.right,node == null ? 0 : node._height);
		} else if(c < 0) {
			var nl = this.setLoop(k,v,node.left);
			return this.balance(nl,node.key,node.value,node.right);
		} else {
			var nr = this.setLoop(k,v,node.right);
			return this.balance(node.left,node.key,node.value,nr);
		}
	}
	,balance: function(l,k,v,r) {
		var hl = l == null ? 0 : l._height;
		var hr = r == null ? 0 : r._height;
		if(hl > hr + 2) {
			var _this = l.left;
			var _this1 = l.right;
			if((_this == null ? 0 : _this._height) >= (_this1 == null ? 0 : _this1._height)) {
				return new haxe_ds_TreeNode(l.left,l.key,l.value,new haxe_ds_TreeNode(l.right,k,v,r));
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l.left,l.key,l.value,l.right.left),l.right.key,l.right.value,new haxe_ds_TreeNode(l.right.right,k,v,r));
			}
		} else if(hr > hl + 2) {
			var _this2 = r.right;
			var _this3 = r.left;
			if((_this2 == null ? 0 : _this2._height) > (_this3 == null ? 0 : _this3._height)) {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left),r.key,r.value,r.right);
			} else {
				return new haxe_ds_TreeNode(new haxe_ds_TreeNode(l,k,v,r.left.left),r.left.key,r.left.value,new haxe_ds_TreeNode(r.left.right,r.key,r.value,r.right));
			}
		} else {
			return new haxe_ds_TreeNode(l,k,v,r,(hl > hr ? hl : hr) + 1);
		}
	}
	,compare: function(k1,k2) {
		return Reflect.compare(k1,k2);
	}
	,__class__: haxe_ds_BalancedTree
};
var haxe_ds_TreeNode = function(l,k,v,r,h) {
	if(h == null) {
		h = -1;
	}
	this.left = l;
	this.key = k;
	this.value = v;
	this.right = r;
	if(h == -1) {
		var tmp;
		var _this = this.left;
		var _this1 = this.right;
		if((_this == null ? 0 : _this._height) > (_this1 == null ? 0 : _this1._height)) {
			var _this2 = this.left;
			if(_this2 == null) {
				tmp = 0;
			} else {
				tmp = _this2._height;
			}
		} else {
			var _this3 = this.right;
			if(_this3 == null) {
				tmp = 0;
			} else {
				tmp = _this3._height;
			}
		}
		this._height = tmp + 1;
	} else {
		this._height = h;
	}
};
haxe_ds_TreeNode.__name__ = true;
haxe_ds_TreeNode.prototype = {
	__class__: haxe_ds_TreeNode
};
var haxe_ds_EnumValueMap = function() {
	haxe_ds_BalancedTree.call(this);
};
haxe_ds_EnumValueMap.__name__ = true;
haxe_ds_EnumValueMap.__interfaces__ = [haxe_IMap];
haxe_ds_EnumValueMap.__super__ = haxe_ds_BalancedTree;
haxe_ds_EnumValueMap.prototype = $extend(haxe_ds_BalancedTree.prototype,{
	compare: function(k1,k2) {
		var d = k1[1] - k2[1];
		if(d != 0) {
			return d;
		}
		var p1 = k1.slice(2);
		var p2 = k2.slice(2);
		if(p1.length == 0 && p2.length == 0) {
			return 0;
		}
		return this.compareArgs(p1,p2);
	}
	,compareArgs: function(a1,a2) {
		var ld = a1.length - a2.length;
		if(ld != 0) {
			return ld;
		}
		var _g1 = 0;
		var _g = a1.length;
		while(_g1 < _g) {
			var i = _g1++;
			var d = this.compareArg(a1[i],a2[i]);
			if(d != 0) {
				return d;
			}
		}
		return 0;
	}
	,compareArg: function(v1,v2) {
		if(Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2)) {
			return this.compare(v1,v2);
		} else if((v1 instanceof Array) && v1.__enum__ == null && ((v2 instanceof Array) && v2.__enum__ == null)) {
			return this.compareArgs(v1,v2);
		} else {
			return Reflect.compare(v1,v2);
		}
	}
	,__class__: haxe_ds_EnumValueMap
});
var interpreter_ASTType = { __ename__ : true, __constructs__ : ["ANumber","AString","ASymbol","ABoolean","APicture","AList","ALambda","AClosure","AQuote","AIf","ADef","AListSymbol","ABegin"] };
interpreter_ASTType.ANumber = function(number) { var $x = ["ANumber",0,number]; $x.__enum__ = interpreter_ASTType; return $x; };
interpreter_ASTType.AString = function(string) { var $x = ["AString",1,string]; $x.__enum__ = interpreter_ASTType; return $x; };
interpreter_ASTType.ASymbol = function(string) { var $x = ["ASymbol",2,string]; $x.__enum__ = interpreter_ASTType; return $x; };
interpreter_ASTType.ABoolean = function($boolean) { var $x = ["ABoolean",3,$boolean]; $x.__enum__ = interpreter_ASTType; return $x; };
interpreter_ASTType.APicture = function(x,y) { var $x = ["APicture",4,x,y]; $x.__enum__ = interpreter_ASTType; return $x; };
interpreter_ASTType.AList = function(list) { var $x = ["AList",5,list]; $x.__enum__ = interpreter_ASTType; return $x; };
interpreter_ASTType.ALambda = ["ALambda",6];
interpreter_ASTType.ALambda.__enum__ = interpreter_ASTType;
interpreter_ASTType.AClosure = function(func) { var $x = ["AClosure",7,func]; $x.__enum__ = interpreter_ASTType; return $x; };
interpreter_ASTType.AQuote = ["AQuote",8];
interpreter_ASTType.AQuote.__enum__ = interpreter_ASTType;
interpreter_ASTType.AIf = ["AIf",9];
interpreter_ASTType.AIf.__enum__ = interpreter_ASTType;
interpreter_ASTType.ADef = ["ADef",10];
interpreter_ASTType.ADef.__enum__ = interpreter_ASTType;
interpreter_ASTType.AListSymbol = ["AListSymbol",11];
interpreter_ASTType.AListSymbol.__enum__ = interpreter_ASTType;
interpreter_ASTType.ABegin = ["ABegin",12];
interpreter_ASTType.ABegin.__enum__ = interpreter_ASTType;
var interpreter_Evaluator = function() {
	var _g = new haxe_ds_EnumValueMap();
	_g.set(interpreter_ASTType.ASymbol(""),"");
	this.globalScope = { definitions : _g, outer : null};
};
interpreter_Evaluator.__name__ = true;
interpreter_Evaluator.makeScope = function(_outer) {
	return { definitions : new haxe_ds_EnumValueMap(), outer : _outer};
};
interpreter_Evaluator.define = function(scope,key,value) {
	scope.definitions.set(key,value);
};
interpreter_Evaluator.hasKey = function(scope,key) {
	return scope.definitions.exists(key);
};
interpreter_Evaluator.getValue = function(scope,key) {
	return scope.definitions.get(key);
};
interpreter_Evaluator.findInScopes = function(scope,key) {
	var ret = null;
	ret = interpreter_Evaluator.getValue(scope,key);
	if(ret != null || scope.outer == null) {
		return ret;
	}
	ret = interpreter_Evaluator.findInScopes(scope.outer,key);
	return ret;
};
interpreter_Evaluator.prototype = {
	'eval': function(expr,scope) {
		var _gthis = this;
		var out;
		switch(expr[1]) {
		case 2:
			var reduced = interpreter_Evaluator.findInScopes(scope,expr);
			if(reduced != null) {
				out = reduced;
			} else {
				out = expr;
			}
			break;
		case 0:case 1:case 3:case 4:
			out = expr;
			break;
		case 5:
			var list = expr[2];
			var head = list.pop();
			var tail = list;
			var lOut;
			switch(head[1]) {
			case 5:
				var evHead = this["eval"](head,scope);
				tail.push(evHead);
				lOut = this["eval"](interpreter_ASTType.AList(tail),scope);
				break;
			case 6:
				var args = tail.pop();
				var body = tail.first();
				if(args[1] == 5 && body[1] == 5) {
					var localScope = interpreter_Evaluator.makeScope(scope);
					var lst;
					if(args[1] == 5) {
						var list1 = args[2];
						lst = list1;
					} else {
						lst = null;
					}
					lOut = interpreter_ASTType.AClosure(function(l) {
						var _g_head = lst.h;
						while(_g_head != null) {
							var val = _g_head.item;
							_g_head = _g_head.next;
							var v = val;
							var lOut1 = l.pop();
							interpreter_Evaluator.define(localScope,v,lOut1);
						}
						return _gthis["eval"](body,localScope);
					});
				} else {
					lOut = null;
				}
				break;
			case 7:
				var func = head[2];
				console.log("a");
				var args1 = new List();
				var _g_head1 = tail.h;
				while(_g_head1 != null) {
					var val1 = _g_head1.item;
					_g_head1 = _g_head1.next;
					var i = val1;
					args1.add(this["eval"](i,scope));
				}
				lOut = func(args1);
				break;
			case 8:
				lOut = tail.first();
				break;
			case 9:
				var cond = tail.pop();
				if(cond[1] != 3) {
					cond = this["eval"](tail.first(),scope);
				}
				if(cond[1] == 3) {
					var $boolean = cond[2];
					if(!$boolean) {
						tail.pop();
					}
					lOut = this["eval"](tail.first(),scope);
				} else {
					lOut = null;
				}
				break;
			case 10:
				var tailHead = tail.pop();
				var value = this["eval"](tail.first(),scope);
				if(tailHead[1] == 2) {
					interpreter_Evaluator.define(scope,tailHead,value);
				} else {
					var reduced1 = this["eval"](tailHead,scope);
					if(reduced1[1] == 2) {
						interpreter_Evaluator.define(scope,reduced1,value);
					}
				}
				lOut = null;
				break;
			case 11:
				lOut = interpreter_ASTType.AList(tail);
				break;
			case 12:
				lOut = null;
				break;
			default:
				lOut = null;
			}
			out = lOut;
			break;
		default:
			out = null;
		}
		return out;
	}
	,objectize: function(expr) {
		var out;
		if(expr == null) {
			out = null;
		} else {
			switch(expr[1]) {
			case 0:
				var number = expr[2];
				out = editor_workspace_RealType.RNumber(number);
				break;
			case 1:
				var string = expr[2];
				out = editor_workspace_RealType.RString(string);
				break;
			case 2:
				var string1 = expr[2];
				out = editor_workspace_RealType.RSymbol(string1);
				break;
			case 3:
				var $boolean = expr[2];
				out = editor_workspace_RealType.RBoolean($boolean);
				break;
			case 4:
				var y = expr[3];
				var x = expr[2];
				out = editor_workspace_RealType.RPicture(x,y);
				break;
			case 5:
				var list = expr[2];
				out = null;
				break;
			case 6:
				out = editor_workspace_RealType.RLambdaSymbol;
				break;
			case 8:
				out = editor_workspace_RealType.RQuoteSymbol;
				break;
			case 9:
				out = editor_workspace_RealType.RIfSymbol;
				break;
			case 10:
				out = editor_workspace_RealType.RDefSymbol;
				break;
			case 11:
				out = editor_workspace_RealType.RListSymbol;
				break;
			case 12:
				out = editor_workspace_RealType.RBegin;
				break;
			default:
				out = null;
			}
		}
		return out;
	}
	,__class__: interpreter_Evaluator
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var pixi_core_renderers_webgl_filters_CurrentState = function() { };
pixi_core_renderers_webgl_filters_CurrentState.__name__ = true;
pixi_core_renderers_webgl_filters_CurrentState.prototype = {
	__class__: pixi_core_renderers_webgl_filters_CurrentState
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
Date.prototype.__class__ = Date;
Date.__name__ = ["Date"];
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
pixi_plugins_app_Application.AUTO = "auto";
pixi_plugins_app_Application.RECOMMENDED = "recommended";
pixi_plugins_app_Application.CANVAS = "canvas";
pixi_plugins_app_Application.WEBGL = "webgl";
pixi_plugins_app_Application.POSITION_STATIC = "static";
pixi_plugins_app_Application.POSITION_ABSOLUTE = "absolute";
pixi_plugins_app_Application.POSITION_FIXED = "fixed";
pixi_plugins_app_Application.POSITION_RELATIVE = "relative";
pixi_plugins_app_Application.POSITION_INITIAL = "initial";
pixi_plugins_app_Application.POSITION_INHERIT = "inherit";
Perf.MEASUREMENT_INTERVAL = 1000;
Perf.FONT_FAMILY = "Helvetica,Arial";
Perf.FPS_BG_CLR = "#00FF00";
Perf.FPS_WARN_BG_CLR = "#FF8000";
Perf.FPS_PROB_BG_CLR = "#FF0000";
Perf.MS_BG_CLR = "#FFFF00";
Perf.MEM_BG_CLR = "#086A87";
Perf.INFO_BG_CLR = "#00FFFF";
Perf.FPS_TXT_CLR = "#000000";
Perf.MS_TXT_CLR = "#000000";
Perf.MEM_TXT_CLR = "#FFFFFF";
Perf.INFO_TXT_CLR = "#000000";
Perf.TOP_LEFT = "TL";
Perf.TOP_RIGHT = "TR";
Perf.BOTTOM_LEFT = "BL";
Perf.BOTTOM_RIGHT = "BR";
Perf.DELAY_TIME = 4000;
editor_gui_BoolSelector.fillColor = 2236962;
editor_gui_BoolSelector.lineColor = 16119260;
editor_gui_PictureSelector.fillColor = 2236962;
editor_gui_PictureSelector.lineColor = 16119260;
editor_gui_SelectorElement.fillColor = 2236962;
editor_gui_SelectorElement.lineColor = 16119260;
editor_workspace_Node.selectColor = 15794176;
editor_workspace_ListNode.maxWidth = 528;
js_Boot.__toStr = ({ }).toString;
Main.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
